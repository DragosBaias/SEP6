@page "/MovieList"
@using Entities

<div class="container">
    <h3 class="title">Explore all movies</h3>

    <div class="bar">
        <div class="search-bar">
            @if (_searchMode)
            {
                <input type="text" @bind="_searchQuery" placeholder="Search by title" />
                <button class="custom-button" @onclick="SearchMovies">Search</button>
                <button class="close-button" @onclick="CloseSearch"><span>&times;</span></button>
            }
            else
            {
                <button class="custom-button" @onclick="ToggleSearch">Search Movies</button>
            }
        </div>
        <div class="filter-bar">
            <label for="filter-decade">Display all the most popular movies or filter them by decade:</label>
            <select id="filter-decade" @onchange="FilterByDecade">
                <option value="all">All</option>
                <option value="2020s">2020s</option>
                <option value="2010s">2010s</option>
                <option value="2000s">2000s</option>
                <option value="1990s">1990s</option>
                <option value="1980s">1980s</option>
                <option value="1970s">1970s</option>
                <option value="1960s">1960s</option>
                <option value="1950s">1950s</option>
            </select>
        </div>
    </div>

    <div class="movie-list">
        @foreach (var movie in _movies)
        {
            @if (movie != null)
            {
                <div class="movie-card">
                    <div class="movie-poster-container">
                        @if (!string.IsNullOrEmpty(movie.PosterPath))
                        {
                            <img class="movie-poster" src="https://image.tmdb.org/t/p/w500/@movie.PosterPath" alt="@movie.Title" />
                        }
                        else
                        {
                            <img class="fallback-poster" src="fallback-image.jpg" alt="No Poster Available" />
                        }
                    </div>
                    <div class="movie-details">
                        <h4 class="movie-title">@(movie.Title)</h4>
                        <div class="movie-info">
                            <p class="movie-release-date"><strong><em>Release Date:</em></strong> <em>@movie.ReleaseDate</em></p>
                            <p class="movie-vote-average"><strong><em>Vote Average:</em></strong> <em>@movie.VoteAverage</em></p>
                            <p class="movie-vote-count"><strong><em>Vote Count:</em></strong> <em>@movie.VoteCount</em></p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    @if (_movies.Count > 10)
    {
        <div class="pagination">
            @if (_currentPage != 1)
            {
                <button class="page-navigation" @onclick="() => ChangePage(-1)">Previous</button>
            }
            <span class="current-page">Page @_currentPage</span>
            <button class="page-navigation" @onclick="() => ChangePage(1)">Next</button>
        </div>
    }
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    body {
        background-image: url('images/Background.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    .container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    .title {
        width: 100%;
        text-align: center;
        color: white;
        font-family: 'Berlin Sans FB', serif;
        margin-bottom: 30px;
    }

    .movie-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        margin: 0;
        padding: 0;
    }

    .movie-card {
        width: 300px;
        margin: 20px;
        padding: 10px;
        background-color: transparent;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .movie-poster-container {
        height: 400px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .movie-poster,
    .fallback-poster {
        max-width: 100%;
        max-height: 100%;
    }

    .fallback-poster {
        object-fit: contain;
        background-color: #ddd;
        padding: 10px;
    }

    .movie-details {
        padding: 10px;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .movie-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
        word-break: break-word;
        text-align: center;
        color: white;
    }

    .movie-info {
        flex-grow: 1;
    }

    .movie-release-date,
    .movie-vote-average,
    .movie-vote-count {
        margin-bottom: 5px;
        color: white;
    }

    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .page-navigation {
        padding: 10px 20px;
        margin: 0 5px;
        background-color: #ff6b6b;
        color: #fff;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

    .current-page {
        font-weight: bold;
        color: white;
    }

    .search-bar {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }

    .search-bar input {
        padding: 5px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }

    .search-bar button {
        padding: 5px 10px;
        background-color: #ff6b6b;
        color: #fff;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        margin-left: 10px;
    }

    .close-button {
        padding: 5px;
        background-color: #dc3545;
        color: #fff;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        margin-left: 10px;
    }

    .close-button span {
        font-size: 12px;
        line-height: 1;
    }

    .filter-bar {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }

    .filter-bar label {
        margin-right: 10px;
        background-color: #f5f5f5;
        border-radius: 3px;
        border: white 1px solid;
        padding: 4px;
        color: black;
    }

    .filter-bar select {
        padding: 5px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }
</style>
    
@code {
        private List<MovieDetails> _movies = new List<MovieDetails>();
        private int _currentPage = 1;
        private string _searchQuery = string.Empty;
        private bool _searchMode = false;
        TMDBApiClient _tmdbApiClient;

        protected override async Task OnInitializedAsync()
        {
            _tmdbApiClient = new TMDBApiClient("7f4f7ef07e4add825a6a5cedbbf03857");
            await LoadMovies();
        }

        private async Task LoadMovies()
        {

            if (string.IsNullOrEmpty(_searchQuery))
            {
                _movies = await _tmdbApiClient.GetMovies(_currentPage);
            }
            else
            {
                List<MovieDetails> moviesByTitle = new List<MovieDetails>();
                moviesByTitle.Add(await _tmdbApiClient.GetMovieByTitle(_searchQuery));
                _movies = moviesByTitle;
            }
        }

        private async Task ChangePage(int offset)
        {
            _currentPage += offset;
            if (_currentPage < 1)
                _currentPage = 1;

            await LoadMovies();
        }

        private async Task SearchMovies()
        {
            _currentPage = 1;
            await LoadMovies();
            _searchMode = true;
        }

        private async void CloseSearch()
        {
            _searchMode = false;
            _searchQuery = string.Empty;
            _currentPage = 1;
            await LoadMovies();
            StateHasChanged();
        }

        private async Task FilterByDecade(ChangeEventArgs e)
        {
            if (e.Value != null)
            {
                string decade = e.Value.ToString();
                if (decade.Equals("all"))
                    _movies = await _tmdbApiClient.GetPopularMovies();
                else
                {
                    _movies = await _tmdbApiClient.Get10MostPopularMoviesByDecade(int.Parse(decade.Replace("s", "")));
                }
            }
            StateHasChanged();
        }

        private async Task ViewMostPopularMovies()
        {
            _movies = await _tmdbApiClient.GetPopularMovies();
            StateHasChanged();
        }

        private void ToggleSearch()
        {
            _searchMode = true;
        }

    }